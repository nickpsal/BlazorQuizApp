@page "/showquiz"
@page "/showquiz/{quiz}"
@rendermode InteractiveServer
@inject IReadJSON readJson

<PageTitle>Weather</PageTitle>
<h3>Quiz</h3>

@if (quizData.Count == 0)
{
    <p><em>Empty quiz</em></p>
}
else
{
    <div class="card-body">
        @foreach (var question in quizData)
        {
            <div> 
                @question.question <br />
                @foreach(var answer in question.Answers)
                {
                    <label><input type="radio" checked="@IsOptionSelected(question.question, answer)" @onchange='() => SetSelectedChoice(question.question, answer)' />@answer</label>
                    <br />
                }
                @if (Messages.Count != 0)
                {
                    <div>@Messages[question.question]</div>
                }
            </div>
        }
        @if (!isFinished)
        {
            <button @onclick="HandleSubmit">Submit</button>
            <button @onclick="HandleClear">Clear</button>
        }else {
            <button @onclick="HandleClear">Retry</button>
        }
    </div>
}

@code {
    [Parameter]
    public string? quiz { get; set; }
    private int CorrectAnswersCounter = 0;
    private bool isFinished = false;
    public List<QuizData> quizData { get; set; } = new();
    private Dictionary<string, string> selectedChoices = new Dictionary<string, string>();
    private Dictionary<string, string> Messages = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        string path = $"Data/{quiz}.dat";
        quizData = await readJson.LoadQuestions(path);
        quizData = readJson.ShuffleQuestions(quizData);
        quizData = readJson.ShuffleAnswers(quizData);
        InitializeSelectedChoice();
    }

    private void InitializeSelectedChoice()
    {
        foreach (var question in quizData)
        {
            selectedChoices[question.question] = "";
        }
    }

    private bool IsOptionSelected(string question, string option)
    {
        return selectedChoices[question] == option;
    }

    private void SetSelectedChoice(string question, string option)
    {
        selectedChoices[question] = option;
    }

    private void initializeMessages()
    {
        foreach (var question in quizData)
        {
            Messages[question.question] = "";
        }
    }

    protected void HandleSubmit()
    {
        initializeMessages();
        checkAnswers();
        isFinished = true;
    }

    protected void HandleClear()
    {
        foreach (var question in quizData)
        {
            if (!String.IsNullOrEmpty(selectedChoices[question.question]))
            {
                SetSelectedChoice(question.question, "");
                initializeMessages();
                break;
            }
        }
    }

    private void checkAnswers()
    {
        foreach (var question in quizData)
        {
            if (question.correct == selectedChoices[question.question])
            {
                Messages[question.question] = "Your Answer is Correct.";
                CorrectAnswersCounter++;
            }else
            {
                Messages[question.question] = "Your Answer was Incorrect.";
            }
        }
    }

    private async Task<List<QuizData>> LoadQuestions(string path)
    {
        try
        {
            // Use StreamReaderAsync to read the contents asynchronously.
            using (StreamReader reader = new StreamReader(path))
            {
                // Read the contents asynchronously.
                string json = await reader.ReadToEndAsync();
                // Create a JsonSerializerOptions object to specify the options for deserializing the JSON data.
                JsonSerializerOptions options = new JsonSerializerOptions();
                options.PropertyNameCaseInsensitive = true;
                // Deserialize the JSON data into a strongly typed object using the JsonSerializer.Deserialize<T>() method.
                return JsonSerializer.Deserialize<List<QuizData>>(json, options)!;
            }
        } catch (FileNotFoundException)
        {
            Console.WriteLine("Δεν Βρέθηκε το Αρχείο");
            return new List<QuizData>();
        } catch (IOException ex)
        {
            // Handle other I/O exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
            return new List<QuizData>();
        } catch (Exception exp)
        {
            Console.WriteLine($"Σφάλμα: {exp}");
            return new List<QuizData>();
        }
    }
}
